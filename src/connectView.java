/**********************************************************************

   Class: connectView.java
   purpose: Main class of connectK game.  This is the main window of 
            the program.
   Author: Thuan Truong
   E-mail: tim@drimgmt.com

***********************************************************************/

import java.awt.*;
import java.sql.Time;
import symantec.itools.awt.shape.Rect;
import symantec.itools.awt.shape.Line;
import symantec.itools.awt.shape.HorizontalLine;
import symantec.itools.awt.shape.VerticalLine;
import symantec.itools.awt.ImagePanel;
import symantec.itools.awt.shape.Circle;
//import com.sun.java.swing.JPanel;

public class connectView extends Frame 
{
	private int rows;
	private int cols;
	private int wins;
	private boolean isGon;
	private char mark;
    
	public connectView() // default constructor
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(204,204,204));
		setSize(640,480);
		setVisible(false);
		try {
			horizontalLine1.setBevelStyle(symantec.itools.awt.shape.HorizontalLine.BEVEL_LOWERED);
		}
		catch(java.beans.PropertyVetoException e) { }
		add(horizontalLine1);
		horizontalLine1.setBounds(4,0,631,2);
		New.setLabel("New Game");
		add(New);
		New.setBounds(36,432,107,32);
		reStart.setLabel("Restart");
		add(reStart);
		reStart.setBounds(144,432,107,32);
		humanTime.setText("00:00:00");
		humanTime.setAlignment(java.awt.Label.CENTER);
		add(humanTime);
		humanTime.setBackground(java.awt.Color.white);
		humanTime.setForeground(new java.awt.Color(0,0,160));
		humanTime.setFont(new Font("Dialog", Font.BOLD, 16));
		humanTime.setBounds(168,17,120,24);
		computerTime.setText("00:00:00");
		computerTime.setAlignment(java.awt.Label.CENTER);
		add(computerTime);
		computerTime.setBackground(java.awt.Color.white);
		computerTime.setForeground(new java.awt.Color(0,0,160));
		computerTime.setFont(new Font("Dialog", Font.BOLD, 16));
		computerTime.setBounds(444,17,120,24);
		label1.setText("Human Time");
		label1.setAlignment(java.awt.Label.RIGHT);
		add(label1);
		label1.setFont(new Font("Dialog", Font.BOLD, 12));
		label1.setBounds(84,17,72,24);
		label2.setText("Computer Time");
		label2.setAlignment(java.awt.Label.RIGHT);
		add(label2);
		label2.setFont(new Font("Dialog", Font.BOLD, 12));
		label2.setBounds(342,17,90,24);
		bQuit.setLabel("Quit Game");
		add(bQuit);
		bQuit.setBackground(java.awt.Color.lightGray);
		bQuit.setBounds(480,432,107,32);
		setTitle("Connect Game");
		setResizable(false);
		//}}
        
        //{{INIT USER-DEFINED CONTROL
        pB.setLayout(new FlowLayout());
		pB.setBackground(java.awt.Color.white);
		pB.setBounds(36,60,566,346);
		add(pB);
        jPgo.setLayout(null);
		jPgo.setBounds(48,5,544,40);
        add(jPgo);

        //}}
        
		//{{INIT_MENUS
		menu1.setLabel("File");
		menu1.add(newMenuItem);
		newMenuItem.setLabel("New Game");
		newMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_N,false));
		menu1.add(RestartMenuItem);
		RestartMenuItem.setLabel("Restart");
		RestartMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_R,false));
		menu1.add(separatorMenuItem);
		separatorMenuItem.setLabel("-");
		menu1.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		exitMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_X,false));
		mainMenuBar.add(menu1);
		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About Connect");
		aboutMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_A,false));
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(0,480);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		RestartMenuItem.addActionListener(lSymAction);
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);
		newMenuItem.addActionListener(lSymAction);
		New.addActionListener(lSymAction);
		reStart.addActionListener(lSymAction);
		bQuit.addActionListener(lSymAction);
		//}}
	}
   	
    public connectView(String title) // 1 parameter constructor
    {
		this();
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}

	static public void main(String args[]) //main function
	{
	    Options o;
        //Create a new instance of our application's frame
    	connectView cV = new connectView("Connect Game");
		try
		{
		    o = new Options(cV, true);
		    o.setVisible(true);
		    cV.setVars(o);
    		o.dispose();
    		//make it visible.
    		//cV.setVisible(true);
	    }
		catch (Throwable t)
		{
			System.err.println(t);
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}
	public void setComputerTime(String sTime)
	{
	    computerTime.setText(sTime);
	}
	public void setHumanTime(String sTime)
	{
	    humanTime.setText(sTime);
	}
	public void setVars(Options o)
	{
	    rows = o.getRows();
	    cols = o.getCols();
	    wins = o.getWins();
	    mark = o.getPlayer();
	    isGon = o.getG();
	    pB.setVars(this,o);
	}
		
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	symantec.itools.awt.shape.HorizontalLine horizontalLine1 = new symantec.itools.awt.shape.HorizontalLine();
	java.awt.Button New = new java.awt.Button();
	java.awt.Button reStart = new java.awt.Button();
	java.awt.Label humanTime = new java.awt.Label();
	java.awt.Label computerTime = new java.awt.Label();
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Button bQuit = new java.awt.Button();
	//}}
	
	//{{DECLARE USER-DEFINED CONTROL
	    pBoard pB = new pBoard();	
	    jPshowGo jPgo = new jPshowGo(pB);
	//}}
	
	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu1 = new java.awt.Menu();
	java.awt.MenuItem newMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem RestartMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem separatorMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	//}}
	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == connectView.this)
				connectView_WindowClosing(event);
		}
	}
	
	void connectView_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		connectView_WindowClosing_Interaction1(event);
	}


	void connectView_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			// QuitDialog Create and show as modal
			QuitDialog qd = new QuitDialog(this, true);
			qd.setVisible(true);
			qd.dispose();
		} catch (Exception e) {
		}
	}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == RestartMenuItem)
				RestartMenuItem_ActionPerformed(event);
			else if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);
			else if (object == newMenuItem)
				newMenuItem_ActionPerformed(event);
			else if (object == New)
				New_ActionPerformed(event);
			else if (object == reStart)
				reStart_ActionPerformed(event);
			else if (object == bQuit)
				bQuit_ActionPerformed(event);
		}
	}
	
	void RestartMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		RestartMenuItem_ActionPerformed_Interaction1(event);
	}


	void RestartMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
        reStart();
    }


	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}


	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	
	
	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitMenuItem_ActionPerformed_Interaction1(event);
	}


	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// QuitDialog Create and show as modal
		    (new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}


	void newMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		newMenuItem_ActionPerformed_Interaction1(event);
	}

	void newMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
        newGame();
	}

	void newGame()
	{
        Options o;
		try {
			// Create an Options object and show as modal
			o = new Options(this, true);
			o.setVisible(true);
			pB.reset(mark,true);
			setVars(o);
			o.dispose();
		} catch (Exception e) {
		}
	}
	void reStart()
	{
        pB.reset(mark,false);
	}

	void New_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		New_ActionPerformed_Interaction1(event);
	}

	void New_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			this.newGame();
		} catch (Exception e) {
		}
	}

	void reStart_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		reStart_ActionPerformed_Interaction1(event);
	}

	void reStart_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			this.reStart();
		} catch (Exception e) {
		}
	}
	
	void bQuit_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		bQuit_ActionPerformed_Interaction1(event);
	}

	void bQuit_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// QuitDialog Create and show as modal
			QuitDialog qd = new QuitDialog(this, true);
			qd.setVisible(true);
			qd.dispose();
		} catch (Exception e) {
		}
	}
}

